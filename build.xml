<?xml version="1.0" encoding="UTF-8"?>
<!--
    Ant build script
-->
<project default="all" name="talis-php-client" basedir=".">
    <property environment="env"/>

    <property name="src.dir" location="src"/>
    <property name="vendor.dir" location="vendor"/>

    <property name="test.dir" location="test"/>
    <property name="unit.test.dir" location="${test.dir}/unit"/>
    <property name="integration.test.dir" location="${test.dir}/integration"/>

    <property name="build.dir" location="build"/>
    <property name="coverage.dir" location="${build.dir}/coverage"/>

    <target name="all" depends="init, test"/>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${coverage.dir}"/>
        <exec executable="redis-cli" failonerror="true">
            <arg line="-n 2 flushdb"/>
        </exec>
    </target>

    <target name="init" depends="install-composer"
            description="Set up the local environment, download required libs through Composer etc">
        <!-- Check for updates to Composer -->
        <exec executable="php" failonerror="true">
            <arg value="composer.phar"/>
            <arg value="self-update"/>
        </exec>

        <!-- Install dependencies through Composer -->
        <exec executable="php" failonerror="true">
            <arg value="composer.phar"/>
            <arg value="update"/>
        </exec>
    </target>

    <target name="check-composer">
        <echo>Checking to see if composer.phar exists...</echo>
        <available file="composer.phar" property="composer.exists"/>
    </target>

    <target name="install-composer" depends="check-composer" unless="composer.exists">
        <echo>Installing composer...</echo>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="curl -sS https://getcomposer.org/installer | php"/>
        </exec>
    </target>

    <target name="test" depends="clean,  unittest, integrationtest" description="Run all the tests"/>

    <target name="lint" depends="clean">
        <echo>Running PHP Lint for code quality...</echo>
        <exec dir="." executable="${vendor.dir}/bin/phplint" failonerror="true">
            <arg line="./ --exclude=vendor --no-cache" />
        </exec>
        <echo>Running PHP Codesniffer for code quality...</echo>
        <exec dir="." executable="${vendor.dir}/bin/phpcs" failonerror="true"/>
    </target>

    <target name="code-check" depends="clean">
        <echo>Running PHPMD to detect code problems ...</echo>
        <exec dir="." executable="${vendor.dir}/bin/phpmd" failonerror="true">
            <arg line="${src.dir} text codesize,unusedcode,naming"/>
        </exec>
    </target>

    <target name="coverage" depends="clean" description="Run code coverage over the unit tests">
        <exec executable="${vendor.dir}/bin/phpunit" failonerror="true">
            <arg line="--coverage-html ${coverage.dir}"/>
        </exec>
    </target>

    <target name="unittest" depends="clean">
        <exec executable="${vendor.dir}/bin/phpunit" failonerror="true">
            <arg line="${unit.test.dir}"/>
            <arg line="--log-junit ${build.dir}/unittest-report.xml"/>
        </exec>
    </target>

    <target name="integrationtest" depends="clean">
        <exec executable="${vendor.dir}/bin/phpunit" failonerror="true">
            <env key="PERSONA_TEST_HOST" value="${env.PERSONA_TEST_HOST}" />
            <env key="PERSONA_TEST_OAUTH_CLIENT" value="${env.PERSONA_TEST_OAUTH_CLIENT}" />
            <env key="PERSONA_TEST_OAUTH_SECRET" value="${env.PERSONA_TEST_OAUTH_SECRET}" />
            <arg line="${integration.test.dir}"/>
            <arg line="--log-junit ${build.dir}/integrationtest-report.xml"/>
        </exec>
    </target>

    <target name="build">
        <exec executable="/usr/bin/docker" failonerror="true">
            <arg value="build" />
            <arg value="-t" />
            <arg value="talis/talis-php" />
            <arg value="--build-arg" />
            <arg value="git_oauth_token=${env.git_oauth_token}" />
            <arg value="--build-arg" />
            <arg value="persona_oauth_client=${env.persona_oauth_client}" />
            <arg value="--build-arg" />
            <arg value="persona_oauth_secret=${env.persona_oauth_secret}" />
            <arg value="." />
        </exec>
    </target>
</project>
